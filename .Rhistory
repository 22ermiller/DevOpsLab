beta = matrix(NA, n_iter, n_questions),
sigma = numeric(n_iter),
theta = matrix(NA, n_iter, n_students)
)
# Starting values
samples$beta[1,] <- rep(0, n_questions)
samples$sigma[1] <- 1
samples$theta[1,] <- rep(0, n_students)
# Pre-allocate proposal vectors
beta_prop <- numeric(n_questions)
theta_prop <- numeric(n_students)
# Progress bar
pb <- txtProgressBar(min = 2, max = n_iter, style = 3)
for (i in 2:n_iter) {
# Sample beta (vectorized)
beta_prop <- rnorm(n_questions, samples$beta[i-1,], 0.1)
log_alpha <- beta_j_likelihood_vec(beta_prop, samples$theta[i-1,], y, m, diag(V)) -
beta_j_likelihood_vec(samples$beta[i-1,], samples$theta[i-1,], y, m, diag(V))
accept <- (log(runif(n_questions)) < log_alpha
samples$beta[i,] <- ifelse(accept, beta_prop, samples$beta[i-1,])
beta_j_likelihood_vec <- function(beta, theta, y, m, V) {
logit <- outer(theta, beta, "-")
bernoulli_part <- colSums(y * logit - log1p(exp(logit)))
prior_part <- -0.5 * (beta - m)^2 / V
bernoulli_part + prior_part
}
theta_i_likelihood_vec <- function(theta, beta, sigma, y) {
logit <- outer(theta, beta, "-")
bernoulli_part <- rowSums(y * logit - log1p(exp(logit)))
prior_part <- -theta^2 / (2 * sigma^2)
bernoulli_part + prior_part
}
sigma_likelihood_vec <- function(sigma, theta) {
n <- length(theta)
-n * log(sigma) - sum(theta^2) / (2 * sigma^2)
}
MCMC_algorithm_fast <- function(y, m, V, a, n_iter, burn_in = round(n_iter/5)) {
n_students <- nrow(y)
n_questions <- ncol(y)
# Initialize storage
samples <- list(
beta = matrix(NA, n_iter, n_questions),
sigma = numeric(n_iter),
theta = matrix(NA, n_iter, n_students)
)
# Starting values
samples$beta[1,] <- rep(0, n_questions)
samples$sigma[1] <- 1
samples$theta[1,] <- rep(0, n_students)
# Pre-allocate proposal vectors
beta_prop <- numeric(n_questions)
theta_prop <- numeric(n_students)
# Progress bar
pb <- txtProgressBar(min = 2, max = n_iter, style = 3)
for (i in 2:n_iter) {
# Sample beta (vectorized)
beta_prop <- rnorm(n_questions, samples$beta[i-1,], 0.1)
log_alpha <- beta_j_likelihood_vec(beta_prop, samples$theta[i-1,], y, m, diag(V)) -
beta_j_likelihood_vec(samples$beta[i-1,], samples$theta[i-1,], y, m, diag(V))
accept <- (log(runif(n_questions)) < log_alpha)
samples$beta[i,] <- ifelse(accept, beta_prop, samples$beta[i-1,])
# Sample sigma (adaptive)
sigma_prop <- runif(1, max(0, samples$sigma[i-1] - 0.5), min(a, samples$sigma[i-1] + 0.5))
log_alpha <- sigma_likelihood_vec(sigma_prop, samples$theta[i-1,]) -
sigma_likelihood_vec(samples$sigma[i-1], samples$theta[i-1,])
if (log(runif(1)) < log_alpha) {
samples$sigma[i] <- sigma_prop
} else {
samples$sigma[i] <- samples$sigma[i-1]
}
# Sample theta (vectorized)
theta_prop <- rnorm(n_students, samples$theta[i-1,], 0.1)
log_alpha <- theta_i_likelihood_vec(theta_prop, samples$beta[i,], samples$sigma[i], y) -
theta_i_likelihood_vec(samples$theta[i-1,], samples$beta[i,], samples$sigma[i], y)
accept <- (log(runif(n_students)) < log_alpha
samples$theta[i,] <- ifelse(accept, theta_prop, samples$theta[i-1,])
MCMC_algorithm_fast <- function(y, m, V, a, n_iter, burn_in = round(n_iter/5)) {
n_students <- nrow(y)
n_questions <- ncol(y)
# Initialize storage
samples <- list(
beta = matrix(NA, n_iter, n_questions),
sigma = numeric(n_iter),
theta = matrix(NA, n_iter, n_students)
)
# Starting values
samples$beta[1,] <- rep(0, n_questions)
samples$sigma[1] <- 1
samples$theta[1,] <- rep(0, n_students)
# Pre-allocate proposal vectors
beta_prop <- numeric(n_questions)
theta_prop <- numeric(n_students)
# Progress bar
pb <- txtProgressBar(min = 2, max = n_iter, style = 3)
for (i in 2:n_iter) {
# Sample beta (vectorized)
beta_prop <- rnorm(n_questions, samples$beta[i-1,], 0.1)
log_alpha <- beta_j_likelihood_vec(beta_prop, samples$theta[i-1,], y, m, diag(V)) -
beta_j_likelihood_vec(samples$beta[i-1,], samples$theta[i-1,], y, m, diag(V))
accept <- (log(runif(n_questions)) < log_alpha)
samples$beta[i,] <- ifelse(accept, beta_prop, samples$beta[i-1,])
# Sample sigma (adaptive)
sigma_prop <- runif(1, max(0, samples$sigma[i-1] - 0.5), min(a, samples$sigma[i-1] + 0.5))
log_alpha <- sigma_likelihood_vec(sigma_prop, samples$theta[i-1,]) -
sigma_likelihood_vec(samples$sigma[i-1], samples$theta[i-1,])
if (log(runif(1)) < log_alpha) {
samples$sigma[i] <- sigma_prop
} else {
samples$sigma[i] <- samples$sigma[i-1]
}
# Sample theta (vectorized)
theta_prop <- rnorm(n_students, samples$theta[i-1,], 0.1)
log_alpha <- theta_i_likelihood_vec(theta_prop, samples$beta[i,], samples$sigma[i], y) -
theta_i_likelihood_vec(samples$theta[i-1,], samples$beta[i,], samples$sigma[i], y)
accept <- (log(runif(n_students)) < log_alpha)
samples$theta[i,] <- ifelse(accept, theta_prop, samples$theta[i-1,])
setTxtProgressBar(pb, i)
}
close(pb)
# Discard burn-in
keep <- (burn_in + 1):n_iter
list(
beta = samples$beta[keep,],
sigma = samples$sigma[keep],
theta = samples$theta[keep,]
)
}
draws_fast <- MCMC_algorithm_fast(y, m, V, a, 1000)
plot(sigma_draws_fast, type = "l")
sigma_draws_fast <- draws_fast$sigma
plot(sigma_draws_fast, type = "l")
par(mfrow = c(2,3))
for (i in 1:6) {
plot(beta_draws_fast[,i], type = "l")
}
beta_draws_fast <- draws_fast$beta
theta_draws_fast <- draws_fast$theta
plot(sigma_draws_fast, type = "l")
par(mfrow = c(2,3))
for (i in 1:6) {
plot(beta_draws_fast[,i], type = "l")
}
theta_draws_fast
MCMC_algorithm_fast <- function(y, m, V, a, n_iter, burn_in = round(n_iter/5)) {
n_students <- nrow(y)
n_questions <- ncol(y)
# Initialize storage
samples <- list(
beta = matrix(NA, n_iter, n_questions),
sigma = numeric(n_iter),
theta = matrix(NA, n_iter, n_students)
)
# Starting values
samples$beta[1,] <- rep(0, n_questions)
samples$sigma[1] <- 1
samples$theta[1,] <- rep(0, n_students)
# Pre-allocate proposal vectors
beta_prop <- numeric(n_questions)
theta_prop <- numeric(n_students)
for (i in 2:n_iter) {
# Sample beta (vectorized)
beta_prop <- rnorm(n_questions, samples$beta[i-1,], 0.1)
log_alpha <- beta_j_likelihood_vec(beta_prop, samples$theta[i-1,], y, m, diag(V)) -
beta_j_likelihood_vec(samples$beta[i-1,], samples$theta[i-1,], y, m, diag(V))
accept <- (log(runif(n_questions)) < log_alpha)
samples$beta[i,] <- ifelse(accept, beta_prop, samples$beta[i-1,])
# Sample sigma (adaptive)
sigma_prop <- runif(1, max(0, samples$sigma[i-1] - 0.1), min(a, samples$sigma[i-1] + 0.1))
log_alpha <- sigma_likelihood_vec(sigma_prop, samples$theta[i-1,]) -
sigma_likelihood_vec(samples$sigma[i-1], samples$theta[i-1,])
if (log(runif(1)) < log_alpha) {
samples$sigma[i] <- sigma_prop
} else {
samples$sigma[i] <- samples$sigma[i-1]
}
# Sample theta (vectorized)
theta_prop <- rnorm(n_students, samples$theta[i-1,], 0.1)
log_alpha <- theta_i_likelihood_vec(theta_prop, samples$beta[i,], samples$sigma[i], y) -
theta_i_likelihood_vec(samples$theta[i-1,], samples$beta[i,], samples$sigma[i], y)
accept <- (log(runif(n_students)) < log_alpha)
samples$theta[i,] <- ifelse(accept, theta_prop, samples$theta[i-1,])
setTxtProgressBar(pb, i)
}
close(pb)
# Discard burn-in
keep <- (burn_in + 1):n_iter
list(
beta = samples$beta[keep,],
sigma = samples$sigma[keep],
theta = samples$theta[keep,]
)
}
draws_fast <- MCMC_algorithm_fast(y, m, V, a, 1000)
MCMC_algorithm_fast <- function(y, m, V, a, n_iter, burn_in = round(n_iter/5)) {
n_students <- nrow(y)
n_questions <- ncol(y)
# Initialize storage
samples <- list(
beta = matrix(NA, n_iter, n_questions),
sigma = numeric(n_iter),
theta = matrix(NA, n_iter, n_students)
)
# Starting values
samples$beta[1,] <- rep(0, n_questions)
samples$sigma[1] <- 1
samples$theta[1,] <- rep(0, n_students)
# Pre-allocate proposal vectors
beta_prop <- numeric(n_questions)
theta_prop <- numeric(n_students)
# Progress bar
pb <- txtProgressBar(min = 2, max = n_iter, style = 3)
for (i in 2:n_iter) {
# Sample beta (vectorized)
beta_prop <- rnorm(n_questions, samples$beta[i-1,], 0.1)
log_alpha <- beta_j_likelihood_vec(beta_prop, samples$theta[i-1,], y, m, diag(V)) -
beta_j_likelihood_vec(samples$beta[i-1,], samples$theta[i-1,], y, m, diag(V))
accept <- (log(runif(n_questions)) < log_alpha)
samples$beta[i,] <- ifelse(accept, beta_prop, samples$beta[i-1,])
# Sample sigma (adaptive)
sigma_prop <- runif(1, max(0, samples$sigma[i-1] - 0.1), min(a, samples$sigma[i-1] + 0.1))
log_alpha <- sigma_likelihood_vec(sigma_prop, samples$theta[i-1,]) -
sigma_likelihood_vec(samples$sigma[i-1], samples$theta[i-1,])
if (log(runif(1)) < log_alpha) {
samples$sigma[i] <- sigma_prop
} else {
samples$sigma[i] <- samples$sigma[i-1]
}
# Sample theta (vectorized)
theta_prop <- rnorm(n_students, samples$theta[i-1,], 0.1)
log_alpha <- theta_i_likelihood_vec(theta_prop, samples$beta[i,], samples$sigma[i], y) -
theta_i_likelihood_vec(samples$theta[i-1,], samples$beta[i,], samples$sigma[i], y)
accept <- (log(runif(n_students)) < log_alpha)
samples$theta[i,] <- ifelse(accept, theta_prop, samples$theta[i-1,])
setTxtProgressBar(pb, i)
}
close(pb)
# Discard burn-in
keep <- (burn_in + 1):n_iter
list(
beta = samples$beta[keep,],
sigma = samples$sigma[keep],
theta = samples$theta[keep,]
)
}
draws_fast <- MCMC_algorithm_fast(y, m, V, a, 1000)
sigma_draws_fast <- draws_fast$sigma
beta_draws_fast <- draws_fast$beta
theta_draws_fast <- draws_fast$theta
plot(sigma_draws_fast, type = "l")
par(mfrow = c(2,3))
for (i in 1:6) {
plot(beta_draws_fast[,i], type = "l")
}
MCMC_algorithm_fast <- function(y, m, V, a, n_iter, burn_in = round(n_iter/5)) {
n_students <- nrow(y)
n_questions <- ncol(y)
# Initialize storage
samples <- list(
beta = matrix(NA, n_iter, n_questions),
sigma = numeric(n_iter),
theta = matrix(NA, n_iter, n_students)
)
# Starting values
samples$beta[1,] <- rep(0, n_questions)
samples$sigma[1] <- 1
samples$theta[1,] <- rep(0, n_students)
# Pre-allocate proposal vectors
beta_prop <- numeric(n_questions)
theta_prop <- numeric(n_students)
# Progress bar
pb <- txtProgressBar(min = 2, max = n_iter, style = 3)
for (i in 2:n_iter) {
# Sample beta (vectorized)
beta_prop <- rnorm(n_questions, samples$beta[i-1,], 0.1)
log_alpha <- beta_j_likelihood_vec(beta_prop, samples$theta[i-1,], y, m, diag(V)) -
beta_j_likelihood_vec(samples$beta[i-1,], samples$theta[i-1,], y, m, diag(V))
accept <- (log(runif(n_questions)) < log_alpha)
samples$beta[i,] <- ifelse(accept, beta_prop, samples$beta[i-1,])
# Sample sigma (adaptive)
sigma_prop <- runif(1, max(0, samples$sigma[i-1] - 0.2), min(a, samples$sigma[i-1] + 0.2))
log_alpha <- sigma_likelihood_vec(sigma_prop, samples$theta[i-1,]) -
sigma_likelihood_vec(samples$sigma[i-1], samples$theta[i-1,])
if (log(runif(1)) < log_alpha) {
samples$sigma[i] <- sigma_prop
} else {
samples$sigma[i] <- samples$sigma[i-1]
}
# Sample theta (vectorized)
theta_prop <- rnorm(n_students, samples$theta[i-1,], 0.1)
log_alpha <- theta_i_likelihood_vec(theta_prop, samples$beta[i,], samples$sigma[i], y) -
theta_i_likelihood_vec(samples$theta[i-1,], samples$beta[i,], samples$sigma[i], y)
accept <- (log(runif(n_students)) < log_alpha)
samples$theta[i,] <- ifelse(accept, theta_prop, samples$theta[i-1,])
setTxtProgressBar(pb, i)
}
close(pb)
# Discard burn-in
keep <- (burn_in + 1):n_iter
list(
beta = samples$beta[keep,],
sigma = samples$sigma[keep],
theta = samples$theta[keep,]
)
}
draws_fast <- MCMC_algorithm_fast(y, m, V, a, 1000)
sigma_draws_fast <- draws_fast$sigma
beta_draws_fast <- draws_fast$beta
theta_draws_fast <- draws_fast$theta
plot(sigma_draws_fast, type = "l")
MCMC_algorithm_thinned <- function(y, m, V, a, n_iter, burn_in = round(n_iter/5), thin = 5) {
n_students <- nrow(y)
n_questions <- ncol(y)
# Calculate total iterations needed
total_iter <- burn_in + n_iter * thin
# Initialize storage for thinned samples
samples <- list(
beta = matrix(NA, n_iter, n_questions),
sigma = numeric(n_iter),
theta = matrix(NA, n_iter, n_students)
)
# Current values storage
current <- list(
beta = rep(0, n_questions),
sigma = 1,
theta = rep(0, n_students)
)
# Progress bar
pb <- txtProgressBar(min = 1, max = total_iter, style = 3)
sample_count <- 1
for (i in 1:total_iter) {
# Sample beta (vectorized)
beta_prop <- rnorm(n_questions, current$beta, 0.1)
log_alpha <- beta_j_likelihood_vec(beta_prop, current$theta, y, m, diag(V)) -
beta_j_likelihood_vec(current$beta, current$theta, y, m, diag(V))
accept <- (log(runif(n_questions)) < log_alpha)
current$beta <- ifelse(accept, beta_prop, current$beta)
# Sample sigma
sigma_prop <- runif(1, max(0, current$sigma - 0.1), min(a, current$sigma + 0.1))
log_alpha <- sigma_likelihood_vec(sigma_prop, current$theta) -
sigma_likelihood_vec(current$sigma, current$theta)
if (log(runif(1)) < log_alpha) current$sigma <- sigma_prop
# Sample theta (vectorized)
theta_prop <- rnorm(n_students, current$theta, 0.1)
log_alpha <- theta_i_likelihood_vec(theta_prop, current$beta, current$sigma, y) -
theta_i_likelihood_vec(current$theta, current$beta, current$sigma, y)
accept <- (log(runif(n_students)) < log_alpha)
current$theta <- ifelse(accept, theta_prop, current$theta)
# Store samples after burn-in and according to thinning
if (i > burn_in && (i - burn_in) %% thin == 0) {
samples$beta[sample_count,] <- current$beta
samples$sigma[sample_count] <- current$sigma
samples$theta[sample_count,] <- current$theta
sample_count <- sample_count + 1
}
setTxtProgressBar(pb, i)
}
close(pb)
return(samples)
}
draws_fast <- MCMC_algorithm_thinned(y, m, V, a, 100000, 100)
draws_fast <- MCMC_algorithm_thinned(y, m, V, a, 10000, 10)
sigma_draws_fast <- draws_fast$sigma
beta_draws_fast <- draws_fast$beta
theta_draws_fast <- draws_fast$theta
plot(sigma_draws_fast, type = "l")
par(mfrow = c(2,3))
for (i in 1:6) {
plot(beta_draws_fast[,i], type = "l")
}
plot(sigma_draws_fast, type = "l")
runApp('Documents/Work/Executive Dashboard/BellaCapelliExecDash')
runApp('Documents/Work/Executive Dashboard/BellaCapelliExecDash')
runApp('Documents/Work/Executive Dashboard/BellaCapelliExecDash')
test_df <- sale_df |> filter(location == "Monroeville") |>
filter(SaleType == "Service") %>%
distinct(location, SaleDate, Client_TId) %>%
count(location, SaleDate) |> View()
test_df <- sale_df |> filter(location == "Monroeville") |>
filter(SaleType == "Service") %>% mutate(SaleDate = floor_date(SaleDate, unit = "month")) |>
distinct(location, SaleDate, Client_TId) %>%
count(location, SaleDate) |> View()
5+8+14+20+4+7+6+15+3+5+14+9+8+18+13+17
library(shiny)
runUrl("https://ajara.byu.edu/STAT651/Lectures/Lecture17.zip")
runApp('Documents/Work/Executive Dashboard/BellaCapelliExecDash')
runApp('Documents/Work/Executive Dashboard/BellaCapelliExecDash')
runApp('Documents/Work/Executive Dashboard/BellaCapelliExecDash')
shiny::runApp('Documents/Work/Executive Dashboard/BellaCapelliExecDash')
runApp('Documents/Work/Executive Dashboard/CincinnatiExecDashv3')
runApp('Documents/Work/Executive Dashboard/ExecDashv3')
runApp('Documents/Work/Executive Dashboard/KanskiExecDashv3')
runApp('Documents/Work/Executive Dashboard/TurnageExecDashv3')
# write the correct code
C <- matrix(c(rep(0,6),1,-1,0,0,0,0,
rep(0,6),1,0,-1,0,0,0,
rep(0,6),1,0,0,-1,0,0,
rep(0,6),1,0,0,0,-1,0,
rep(0,6),1,0,0,0,0,-1), nrow = 5, byrow = TRUE)
C
C2
# write the correct code
C2 <- matrix(c(1,-1,rep(0,10),
0,0,1,-1,rep(0,8),
0,0,0,0,1,-1,rep(0,6),
rep(0,6),1,-1,0,0,0,0,
rep(0,8),1,-1,0,0,
rep(0,10),1,-1), nrow = 6, byrow = TRUE)
C2
multcomp::glht(out, C2, alternative = "two.sided")
#| warning: false
library(tidyverse)
#| warning: false
ChildGrowth <- read_csv("https://grimshawville.byu.edu/ChildGrowth.csv")
ChildGrowth <- ChildGrowth |>
filter(Age < 15) |>
mutate(Gender = factor(Gender),
Ethnicity = factor(Ethnicity))
ChildGrowth |>
group_by(Ethnicity, Gender) |>
summary(n = count(),
Mean_Wt = mean(Weight), StDev_Wt = sd(Weight),
Min_Wt = min(Weight), P10_Wt = quartile(0.10, Weight),
P90_Wt = quartile(0.90, Weight), Max_Wt = max(Weight))
#| echo: false
#| warning: false
ggplot(ChildGrowth,
aes(x = Age,
y = log(Weight))) +
geom_point() +
geom_smooth() +
labs(
main = "Child Growth",
x = "Age (yrs)",
y = "log(Weight) (kg)"
)
ggplot(ChildGrowth,
aes(x = Age,
y = log(Weight),
col = Gender)) +
#geom_point() +
geom_smooth() +
facet_wrap(~ Ethnicity) +
labs(
main = "Child Growth",
x = "Age (yrs)",
y = "log(Weight) (kg)"
)
out <- lm(log(Weight) ~ 0 + (Gender : Ethnicity) + Gender : Ethnicity : Age, data = ChildGrowth, x = TRUE, y = TRUE)
summary(out)
# write the correct code
red.out <- lm(log(Weight) ~ 1 + Age, data = ChildGrowth, x = TRUE, y = TRUE)
summary(red.out)
anova(red.out, out)
# write the correct code
C <- matrix(c(rep(0,6),1,-1,0,0,0,0,
rep(0,6),1,0,-1,0,0,0,
rep(0,6),1,0,0,-1,0,0,
rep(0,6),1,0,0,0,-1,0,
rep(0,6),1,0,0,0,0,-1), nrow = 5, byrow = TRUE)
multcomp::glht(out, C, alternative = "two.sided")
multcomp::glht(out, C2, alternative = "two.sided")
test <- multcomp::glht(out, C2, alternative = "two.sided")
summary(test, test = Ftest())
summary(test, test = multcomp::Ftest())
# write the correct code
red.out <- lm(log(Weight) ~ 1 + Age, data = ChildGrowth, x = TRUE, y = TRUE)
summary(red.out)
head(red.out$x)
shiny::runApp('Documents/Work/Executive Dashboard/ExecDashv3')
runApp('Documents/Work/Executive Dashboard/ExecDashv3')
runApp('Documents/Work/Executive Dashboard/ExecDashv3')
runApp('Documents/Work/Executive Dashboard/TurnageExecDashv3')
runApp('Documents/Work/Executive Dashboard/TurnageExecDashv3')
runApp('Documents/Work/Executive Dashboard/AustinExecDashv3')
shiny::runApp('Documents/Work/Executive Dashboard/ExecDashv3')
library(httr)
library(httpuv)
library(curl)
library(jsonlite)
library(base64enc)
#Client ID and Client Secret were retrieved from the online explorer
clientID <- "ABkqwQRFXtqT9NY9UCJgjaHYoO3IVDwSW80MAqQNs9YJkXpS9E"
clientSecret <- "9kmfk5uFsS7jqyEamv9f1ujHZdx2wRxg741MC6T1"
scope <- "com.intuit.quickbooks.accounting"
RefreshToken <- "AB117082710904HTL2eLk1TF2v58G5mXHPm3naCAmqsx2X3Z8I"
authorize <- base64enc::base64encode(charToRaw(paste0(clientID,":",clientSecret)))
oauth_refresh <- httr::POST("https://oauth.platform.intuit.com/oauth2/v1/tokens/bearer",
add_headers('Content-Type'= "application/x-www-form-urlencoded",
'Accept'= 'application/json',
'Authorization'= paste0('Basic ',authorize)
),
body = list('grant_type'='refresh_token',
'refresh_token'=RefreshToken),
encode = "form")
oaJSON <- fromJSON(content(oauth_refresh, as = "text"))
RefreshToken <- oaJSON[["refresh_token"]][1]
View(oauth_refresh)
authorize
View(oaJSON)
content(oauth_refresh, as = "text")
shiny::runApp('Documents/Work/Executive Dashboard/ExecDashv3')
runApp('Documents/Work/Executive Dashboard/ExecDashv3')
shiny::runApp('Documents/Work/Executive Dashboard/ExecDashv3')
runApp('Documents/Work/Executive Dashboard/ExecDashv3')
?input_switch
runApp('Documents/Work/Executive Dashboard/ExecDashv3')
getwd()
renv::status()
setwd("~/Documents/Work/GFF/MarginsProject")
renv::activate()
renv::activate("~/Documents/Work/GFF/MarginsProject")
setwd("~/Documents/Work/DevOpsLab")
